package main

import (
	"encoding/json"
	"fmt"
	"github.com/ddkwork/librarygo/src/firefox/bookmark"
	"github.com/ddkwork/librarygo/src/mycheck"
	"github.com/ddkwork/librarygo/src/mylog"
	"os"
	"sort"
)

//clean firefox brower reapted bookmarks
//1
//https://www.deepl.com/zh/translator
//space

type (
	Interface interface {
		Decode(fileName string) (ok bool)
		Sort()
		Encode() (ok bool)
		AllUrl() map[string]Children
	}
	object struct {
		childrens []Children
		allUrl    map[string]Children
	}
)

func main() {
	b := New()
	if !b.Decode("ffbmparse/bookmarks.json") {
		return
	}
	b.Sort()
	if !b.Encode() {
		return
	}
	mylog.Success("all bookmark", len(b.AllUrl()))
}

func (o *object) AllUrl() map[string]Children { return o.allUrl }
func New() Interface {
	return &object{
		childrens: make([]Children, 0),
		allUrl:    make(map[string]Children, 0),
	}
}
func (o *object) Decode(fileName string) (ok bool) {
	fi, err := os.Open(fileName)
	if !mycheck.Error(err) {
		return
	}
	bookmarks := &bookmark.Item{}
	dec := json.NewDecoder(fi)
	if !mycheck.Error(dec.Decode(bookmarks)) {
		return
	}
	DecodeJson(bookmarks, "", o.allUrl)
	for _, children := range o.allUrl {
		o.childrens = append(o.childrens, children)
	}
	return true
}

func (o *object) Sort() {
	sort.Slice(o.childrens, func(i, j int) bool { return o.childrens[i].URI < o.childrens[j].URI })
}

func (o *object) Encode() (ok bool) {
	start := `
{
	"guid": "root________",
	"title": "",
	"index": 0,
	"dateAdded": 1657177590438000,
	"lastModified": 1657182699187000,
	"id": 1,
	"typeCode": 2,
	"type": "text/x-moz-place-container",
	"root": "placesRoot",
	"children": [{
		"guid": "menu________",
		"title": "menu",
		"index": 0,
		"dateAdded": 1657177590438000,
		"lastModified": 1657182217688000,
		"id": 2,
		"typeCode": 2,
		"type": "text/x-moz-place-container",
		"root": "bookmarksMenuFolder"
	}, {
		"guid": "toolbar_____",
		"title": "toolbar",
		"index": 1,
		"dateAdded": 1657177590438000,
		"lastModified": 1657182699187000,
		"id": 3,
		"typeCode": 2,
		"type": "text/x-moz-place-container",
		"root": "toolbarFolder",
		"children": 
`

	end := `
	}, {
		"guid": "unfiled_____",
		"title": "unfiled",
		"index": 3,
		"dateAdded": 1657177590438000,
		"lastModified": 1657177590729000,
		"id": 5,
		"typeCode": 2,
		"type": "text/x-moz-place-container",
		"root": "unfiledBookmarksFolder"
	}, {
		"guid": "mobile______",
		"title": "mobile",
		"index": 4,
		"dateAdded": 1657177590480000,
		"lastModified": 1657177590729000,
		"id": 6,
		"typeCode": 2,
		"type": "text/x-moz-place-container",
		"root": "mobileFolder"
	}]
}
`
	marshal, err := json.MarshalIndent(&o.childrens, "", " ")
	if err != nil {
		panic(err.Error())
	}
	body := start + string(marshal) + end
	fmt.Println(body)
	f, err := os.Create("ffbmparse/bookmarks_new.json")
	if err != nil {
		panic(err.Error())
	}
	return mycheck.Error2(f.WriteString(body))
}

func DecodeJson(bm *bookmark.Item, prefix string, allUrl map[string]Children) {
	if bm.TypeCode == bookmark.TypeFolder && len(bm.Children) > 0 {
		fmt.Printf("%sFolder: %s\n", prefix, bm.Title)
		for i := range bm.Children {
			DecodeJson(bm.Children[i], prefix+"\t", allUrl)
		}
	} else if bm.TypeCode == bookmark.TypeBookmark {
		//fmt.Printf("%sTitle: %s\n", prefix, bm.Title)
		//fmt.Printf("%sURI: %s\n\n", prefix, bm.URI)
		allUrl[bm.URI] = Children{
			GUID:         bm.GUID,
			Title:        bm.Title,
			Index:        bm.Index,
			DateAdded:    bm.DateAdded,
			LastModified: bm.LastModified,
			ID:           bm.ID,
			TypeCode:     bm.TypeCode,
			Type:         bm.Type,
			URI:          bm.URI,
		}
	}
}

type AutoGenerated struct {
	GUID         string     `json:"guid"`
	Title        string     `json:"title"`
	Index        int        `json:"index"`
	DateAdded    int64      `json:"dateAdded"`
	LastModified int64      `json:"lastModified"`
	ID           int        `json:"id"`
	TypeCode     int        `json:"typeCode"`
	Type         string     `json:"type"`
	Root         string     `json:"root"`
	Children     []Children `json:"children"`
}
type Children struct {
	GUID         string `json:"guid"`
	Title        string `json:"title"`
	Index        int    `json:"index"`
	DateAdded    int64  `json:"dateAdded"`
	LastModified int64  `json:"lastModified"`
	ID           int    `json:"id"`
	TypeCode     int    `json:"typeCode"`
	Type         string `json:"type"`
	URI          string `json:"uri"`
}
